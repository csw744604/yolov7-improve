#在models/common.py中添加注意力模块和自定义模块

import torch
import torch.nn as nn
from torch.nn import functional as F

# ---------------------- Channel Attention (CAM) ----------------------
class ChannelAttention(nn.Module):
    def __init__(self, in_planes, ratio=16):
        super(ChannelAttention, self).__init__()
        self.avg_pool = nn.AdaptiveAvgPool2d(1)
        self.max_pool = nn.AdaptiveMaxPool2d(1)
        self.fc = nn.Sequential(
            nn.Conv2d(in_planes, in_planes // ratio, 1, bias=False),
            nn.ReLU(),
            nn.Conv2d(in_planes // ratio, in_planes, 1, bias=False)
        )
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        avg_out = self.fc(self.avg_pool(x))
        max_out = self.fc(self.max_pool(x))
        out = avg_out + max_out
        return self.sigmoid(out) * x

# ---------------------- Spatial Attention (SAM) ----------------------
class SpatialAttention(nn.Module):
    def __init__(self, kernel_size=7):
        super(SpatialAttention, self).__init__()
        self.conv = nn.Conv2d(2, 1, kernel_size, padding=kernel_size//2, bias=False)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        avg_out = torch.mean(x, dim=1, keepdim=True)
        max_out, _ = torch.max(x, dim=1, keepdim=True)
        out = torch.cat([avg_out, max_out], dim=1)
        out = self.conv(out)
        return self.sigmoid(out) * x

# ---------------------- Coordinate Attention (EAM) ----------------------
class CoordAtt(nn.Module):
    def __init__(self, inp, oup, reduction=32):
        super(CoordAtt, self).__init__()
        self.pool_h = nn.AdaptiveAvgPool2d((None, 1))
        self.pool_w = nn.AdaptiveAvgPool2d((1, None))
        mip = max(8, inp // reduction)
        self.conv1 = nn.Conv2d(inp, mip, kernel_size=1, stride=1, padding=0)
        self.bn1 = nn.BatchNorm2d(mip)
        self.act = nn.Hardswish()
        self.conv_h = nn.Conv2d(mip, oup, kernel_size=1, stride=1, padding=0)
        self.conv_w = nn.Conv2d(mip, oup, kernel_size=1, stride=1, padding=0)

    def forward(self, x):
        identity = x
        n, c, h, w = x.size()
        x_h = self.pool_h(x)
        x_w = self.pool_w(x).permute(0, 1, 3, 2)
        y = torch.cat([x_h, x_w], dim=2)
        y = self.conv1(y)
        y = self.bn1(y)
        y = self.act(y)
        x_h, x_w = torch.split(y, [h, w], dim=2)
        x_w = x_w.permute(0, 1, 3, 2)
        a_h = self.conv_h(x_h).sigmoid()
        a_w = self.conv_w(x_w).sigmoid()
        return identity * a_w * a_h

# ---------------------- Shuffle Units ----------------------
def channel_shuffle(x, groups):
    batchsize, num_channels, height, width = x.data.size()
    channels_per_group = num_channels // groups
    x = x.view(batchsize, groups, channels_per_group, height, width)
    x = torch.transpose(x, 1, 2).contiguous()
    x = x.view(batchsize, -1, height, width)
    return x

class ShuffleUnit(nn.Module):
    def __init__(self, c1, c2):
        super().__init__()
        c_ = c1 // 2
        self.split_idx = c_
        self.conv1 = nn.Conv2d(c_, c_, 1, 1, 0, groups=c_)
        self.bn1 = nn.BatchNorm2d(c_)
        self.act = nn.SiLU()
        self.cam = ChannelAttention(c_)
        self.sam = SpatialAttention()
        self.conv2 = nn.Conv2d(c_, c_, 1, 1, 0)

    def forward(self, x):
        x1, x2 = x.split([self.split_idx, x.size(1) - self.split_idx], 1)
        x2 = self.act(self.bn1(self.conv1(x2)))
        x2 = self.cam(x2)
        x2 = self.sam(x2)
        x2 = self.conv2(x2)
        out = torch.cat([x1, x2], dim=1)
        return channel_shuffle(out, 2)

# ---------------------- SFE Module ----------------------
class SFE(nn.Module):
    def __init__(self, c1, c2):
        super().__init__()
        # 多尺度特征提取
        self.conv7x7 = nn.Conv2d(c1, c2//3, 7, 1, 3, groups=c2//3)
        self.conv5x5 = nn.Conv2d(c1, c2//3, 5, 1, 2, groups=c2//3)
        self.conv3x3 = nn.Conv2d(c1, c2//3, 3, 1, 1, groups=c2//3)
        self.bn = nn.BatchNorm2d(c2)
        self.act = nn.SiLU()
        
        # 分支1：通道分割 + CAM + SAM
        self.shuffle = ShuffleUnit(c2, c2)
        # 分支2：坐标注意力
        self.ca = CoordAtt(c2, c2)
        
    def forward(self, x):
        # 多尺度特征融合
        x1 = self.conv7x7(x)
        x2 = self.conv5x5(x)
        x3 = self.conv3x3(x)
        x = torch.cat([x1, x2, x3], dim=1)
        x = self.act(self.bn(x))
        
        # 分支1
        b1 = self.shuffle(x)
        # 分支2
        b2 = self.ca(x)
        return b1 + b2

# ---------------------- SFM Module ----------------------
class SFM(nn.Module):
    def __init__(self, c1, c2):
        super().__init__()
        self.conv7x7 = nn.Conv2d(c1, c2, 7, 1, 3, groups=c1)
        self.conv5x5 = nn.Conv2d(c1, c2, 5, 1, 2, groups=c1)
        self.conv3x3 = nn.Conv2d(c1, c2, 3, 1, 1, groups=c1)
        self.bn = nn.BatchNorm2d(c2*3)
        self.act = nn.SiLU()
        self.proj = nn.Conv2d(c2*3, c2, 1, 1, 0)

    def forward(self, x):
        x1 = self.conv7x7(x)
        x2 = self.conv5x5(x)
        x3 = self.conv3x3(x)
        x = torch.cat([x1, x2, x3], dim=1)
        x = self.act(self.bn(x))
        return self.proj(x)
